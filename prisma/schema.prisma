// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

/**
 * *************************************************************
 * ================== Common Database Modals ===================
 * *************************************************************
 */
enum Role {
  SUPER_ADMIN
  TENANT_ADMIN
  USER
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
  TRIAL
  EXPIRED
}

enum PlanType {
  FREE
  PRO_MONTHLY
  PRO_ANNUAL
}

/**
 * *************************************************************
 * ================== User Database Modals =====================
 * *************************************************************
 */

model User {
  id                 String    @id @default(auto()) @map("_id") @db.ObjectId
  firstName          String?
  lastName           String?
  email              String?   @unique
  emailVerified      DateTime?
  hashedPassword     String?
  roles              Role[]    @default([USER])
  otp                String?
  otpExpiry          DateTime?
  token              String?
  isAccountActivate  Boolean   @default(false)
  isWelcomeEmailSent Boolean   @default(false)
  profileImage       String?   @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_960_720.png")
  isAgreeToTerms     Boolean   @default(false)
  // defaultTenant     String?   @db.ObjectId
  // tenants           String[]  @db.ObjectId
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  deletedAt          DateTime?

  accounts          Account[]
  invitations       Invitation[]      @relation("UserInvitations")
  blogs             Blog[]
  subscriptions     Subscription[]
  payments          Payment[]
  products          Product[]
  productCategories ProductCategory[]
  blogCategories    BlogCategory[]
  cart              Cart? // One-to-one relation with Cart
  orders            Order[] // One-to-many relation with Order
  shippingAddresses ShippingAddress[]
  favoriteProducts  FavoriteProduct[]
  auditLogs         AuditLog[]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Invitation {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  token      String?   @unique
  userId     String?   @db.ObjectId
  userRoleId String?   @db.ObjectId
  tenantId   String?   @db.ObjectId
  acceptedAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user     User?         @relation(fields: [userId], references: [id], onDelete: Cascade, name: "UserInvitations")
  userRole UserRoleType? @relation(fields: [userRoleId], references: [id], onDelete: Cascade)
}

/**
 * *************************************************************
 * ================== Blog Database Modals =====================
 * *************************************************************
 */

model Blog {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  coverImage  String?
  content     String
  createdById String    @db.ObjectId
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  createdBy  User                  @relation(fields: [createdById], references: [id])
  categories BlogCategoryMapping[]
}

model BlogCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  createdById String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  createdBy User                  @relation(fields: [createdById], references: [id])
  blogs     BlogCategoryMapping[]
}

model BlogCategoryMapping {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  blogId     String @db.ObjectId
  categoryId String @db.ObjectId

  blog     Blog         @relation(fields: [blogId], references: [id])
  category BlogCategory @relation(fields: [categoryId], references: [id])

  @@unique([blogId, categoryId])
}

/**
 * *************************************************************
 * ================== Subscription Database Modals =============
 * *************************************************************
 */

model SubscriptionPlan {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  planType      PlanType
  price         Float
  currency      String    @default("USD")
  interval      String // 'month' or 'year'
  stripePriceId String    @unique
  features      String[]
  isActive      Boolean   @default(true)
  trialDays     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  subscriptions Subscription[]
}

model Subscription {
  id                   String             @id @default(auto()) @map("_id") @db.ObjectId
  userId               String             @db.ObjectId
  planId               String             @db.ObjectId
  status               SubscriptionStatus
  stripeCustomerId     String?
  stripeSubscriptionId String?
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  cancelAtPeriodEnd    Boolean            @default(false)
  trialStart           DateTime?
  trialEnd             DateTime?
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  deletedAt            DateTime?

  user User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plan SubscriptionPlan @relation(fields: [planId], references: [id])
}

model Payment {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  userId          String   @db.ObjectId
  orderId         String?  @unique @db.ObjectId
  amount          Float
  currency        String   @default("USD")
  stripePaymentId String   @unique
  status          String // succeeded, pending, failed
  paymentMethod   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id])
}

/**
 * *************************************************************
 * ================== Product Database Modals =====================
 * *************************************************************
 */

model Product {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  coverImage  String?
  content     String
  price       Float     @default(0)
  createdById String    @db.ObjectId
  isPublished Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  createdBy   User                     @relation(fields: [createdById], references: [id])
  categories  ProductCategoryMapping[]
  cartItems   CartItem[] // Relation to CartItem
  orderItems  OrderItem[] // Relation to OrderItem
  favoritedBy FavoriteProduct[]
}

model ProductCategory {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String    @unique
  description String?
  createdById String    @db.ObjectId
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  createdBy User                     @relation(fields: [createdById], references: [id])
  products  ProductCategoryMapping[]
}

model ProductCategoryMapping {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  productId  String @db.ObjectId
  categoryId String @db.ObjectId

  product  Product         @relation(fields: [productId], references: [id])
  category ProductCategory @relation(fields: [categoryId], references: [id])

  @@unique([productId, categoryId])
}

/**
 * *************************************************************
 * ================== Order Database Modals =====================
 * *************************************************************
 */

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

model Order {
  id                    String        @id @default(auto()) @map("_id") @db.ObjectId
  orderNumber           String        @unique // Auto-generated order number
  userId                String        @db.ObjectId
  status                OrderStatus   @default(PENDING)
  paymentStatus         PaymentStatus @default(PENDING)
  totalAmount           Float
  currency              String        @default("USD")
  shippingAddress       Address? // Embedded document for shipping address
  billingAddress        Address? // Embedded document for billing address
  notes                 String?
  trackingNumber        String?
  estimatedDeliveryDate DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  deletedAt             DateTime?

  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items   OrderItem[]
  payment Payment? // Optional relation to payment
}

model OrderItem {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId    String   @db.ObjectId
  productId  String   @db.ObjectId
  quantity   Int
  unitPrice  Float
  totalPrice Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])
}

/**
 * *************************************************************
 * ================== Cart Database Modals =====================
 * *************************************************************
 */

model Cart {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]
}

model CartItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String   @db.ObjectId
  productId String   @db.ObjectId
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

/**
 * *************************************************************************
 * ================== Shipping Address Database Modals =====================
 * *************************************************************************
 */

model ShippingAddress {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  userId     String    @db.ObjectId
  street     String
  city       String
  state      String?
  country    String
  postalCode String
  phone      String?
  isDefault  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isDefault], name: "unique_default_address_per_user")
}

/**
 * *************************************************************************
 * ================== Favorite Product Database Modals =====================
 * *************************************************************************
 */

model FavoriteProduct {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  userId    String    @db.ObjectId
  productId String    @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId], name: "unique_user_product_favorite")
}

/**
 * *********************************************************************************
 * ================== Contact form messages Database Modals =====================
 * *********************************************************************************
 */

model ContactFormMessage {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  email      String?
  subject    String?
  message    String?
  categoryId String    @db.ObjectId
  isRead     Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  category ContactFormCategoryType @relation(fields: [categoryId], references: [id])
}

/**
 * *************************************************************************
 * ================== Audit Logs Database Modals =====================
 * *************************************************************************
 */

enum AuditLogAction {
  // Authentication Actions
  SIGN_IN
  SIGN_OUT
  REGISTER
  GOOGLE_SIGN_IN
  PASSWORD_RESET
  EMAIL_VERIFICATION

  // Cart Actions
  ADD_TO_CART
  REMOVE_FROM_CART
  UPDATE_CART_ITEM
  CLEAR_CART
  VIEW_CART

  // Order Actions
  PLACE_ORDER
  CANCEL_ORDER
  VIEW_ORDER
  TRACK_ORDER
  CHECKOUT_START
  CHECKOUT_COMPLETE
  PAYMENT_SUCCESS
  PAYMENT_FAILED

  // Product Actions
  VIEW_PRODUCT
  SEARCH_PRODUCTS
  FILTER_PRODUCTS
  ADD_TO_FAVORITES
  REMOVE_FROM_FAVORITES
  RATE_PRODUCT
  REVIEW_PRODUCT

  // User Profile Actions
  UPDATE_PROFILE
  UPDATE_ADDRESS
  DELETE_ADDRESS
  SET_DEFAULT_ADDRESS
  UPDATE_PREFERENCES

  // Navigation Actions
  PAGE_VISIT
  MENU_CLICK
  BANNER_CLICK
  PROMOTION_CLICK
  CATEGORY_VIEW

  // Subscription Actions
  SUBSCRIBE
  UNSUBSCRIBE
  UPGRADE_PLAN
  DOWNGRADE_PLAN
  CANCEL_SUBSCRIPTION

  // Contact Actions
  CONTACT_FORM_SUBMIT
  NEWSLETTER_SUBSCRIBE
  NEWSLETTER_UNSUBSCRIBE
}

model AuditLog {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  userId    String?        @db.ObjectId // Optional since we want to track non-authenticated users
  action    AuditLogAction
  page      String? // URL or page identifier
  metadata  Json? // Additional data like productId, orderId, etc.
  userAgent String? // Browser/device info
  ipAddress String? // IP address for analytics
  sessionId String? // Session identifier for anonymous users
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
}

/**
 * **********************************************************
 * ================ Types Database Modals ===================
 * **********************************************************
 */
model CountryType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  countryId Int       @unique
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model UserRoleType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  roleId    Int       @unique
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  invitations Invitation[]
}

model ContactFormCategoryType {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  countryId Int       @unique
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  messages ContactFormMessage[]
}

// Add Address type for embedded documents
type Address {
  street     String
  city       String
  state      String?
  country    String
  postalCode String
  phone      String?
}
